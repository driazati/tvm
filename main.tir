assert((num_args: int32 == 2), "main: num_args should be 2 but found num_args") [missing]
let arg.a: handle = @tir.tvm_struct_get(args: handle, 0, 12, dtype=handle) [missing]
let arg.a.code: int32 = arg_type_ids: Buffer(arg_type_ids_1: Pointer(int32), int32, [2], [])[0] [missing]
let arg.b: handle = @tir.tvm_struct_get(args, 1, 12, dtype=handle) [missing]
let arg.b.code: int32 = arg_type_ids[1] [missing]
let A: Pointer(global float32) = @tir.tvm_struct_get(arg.a, 0, 1, dtype=handle) [missing]
attr [A] "storage_alignment" = 64; [missing]
let arg.a.shape: Pointer(int64) = @tir.tvm_struct_get(arg.a, 0, 2, dtype=handle) [missing]
let arg.a.strides: Pointer(int64) = @tir.tvm_struct_get(arg.a, 0, 3, dtype=handle) [missing]
let dev_id: int32 = @tir.tvm_struct_get(arg.a, 0, 9, dtype=int32) [missing]
let B: Pointer(global float32) = @tir.tvm_struct_get(arg.b, 0, 1, dtype=handle) [missing]
attr [B] "storage_alignment" = 64; [missing]
let arg.b.shape: Pointer(int64) = @tir.tvm_struct_get(arg.b, 0, 2, dtype=handle) [missing]
let arg.b.strides: Pointer(int64) = @tir.tvm_struct_get(arg.b, 0, 3, dtype=handle) [missing]
assert(((((arg.a.code == 3) || (arg.a.code == 13)) || (arg.a.code == 7)) || (arg.a.code == 4)), "main: Expect arg[0] to be pointer") [missing]
assert(((((arg.b.code == 3) || (arg.b.code == 13)) || (arg.b.code == 7)) || (arg.b.code == 4)), "main: Expect arg[1] to be pointer") [missing]
assert((1 == @tir.tvm_struct_get(arg.a, 0, 4, dtype=int32)), "arg.a.ndim is expected to equal 1") [missing]
assert((1 == @tir.tvm_struct_get(arg.a, 0, 4, dtype=int32)), "arg.a.ndim is expected to equal 1") [missing]
assert((((@tir.tvm_struct_get(arg.a, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg.a, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg.a, 0, 7, dtype=uint16) == 1u16)), "arg.a.dtype is expected to be float32") [missing]
assert((8 == cast(int32, arg.a.shape_1: Buffer(arg.a.shape, int64, [1], [])[0])), "Argument arg.a.shape[0] has an unsatisfied constraint: (8 == int32(arg.a.shape[0]))") [missing]
 { []
  if !@tir.isnullptr(arg.a.strides, dtype=bool) { [missing]
    assert((1 == cast(int32, arg.a.strides_1: Buffer(arg.a.strides, int64, [0], [])[0])), "arg.a.strides: expected to be compact array") [missing]
    0 [missing]
  } []
  assert((0u64 == @tir.tvm_struct_get(arg.a, 0, 8, dtype=uint64)), "Argument arg.a.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg.a, 0, 8))") [missing]
  assert((1 == @tir.tvm_struct_get(arg.a, 0, 10, dtype=int32)), "Argument arg.a.device_type has an unsatisfied constraint: (1 == tir.tvm_struct_get(arg.a, 0, 10))") [missing]
  assert((1 == @tir.tvm_struct_get(arg.b, 0, 4, dtype=int32)), "arg.b.ndim is expected to equal 1") [missing]
  assert((1 == @tir.tvm_struct_get(arg.b, 0, 4, dtype=int32)), "arg.b.ndim is expected to equal 1") [missing]
  assert((((@tir.tvm_struct_get(arg.b, 0, 5, dtype=uint8) == 2u8) && (@tir.tvm_struct_get(arg.b, 0, 6, dtype=uint8) == 32u8)) && (@tir.tvm_struct_get(arg.b, 0, 7, dtype=uint16) == 1u16)), "arg.b.dtype is expected to be float32") [missing]
  assert((8 == cast(int32, arg.b.shape_1: Buffer(arg.b.shape, int64, [1], [])[0])), "Argument arg.b.shape[0] has an unsatisfied constraint: (8 == int32(arg.b.shape[0]))") [missing]
   { []
    if !@tir.isnullptr(arg.b.strides, dtype=bool) { [missing]
      assert((1 == cast(int32, arg.b.strides_1: Buffer(arg.b.strides, int64, [0], [])[0])), "arg.b.strides: expected to be compact array") [missing]
      0 [missing]
    } []
    assert((0u64 == @tir.tvm_struct_get(arg.b, 0, 8, dtype=uint64)), "Argument arg.b.byte_offset has an unsatisfied constraint: ((uint64)0 == tir.tvm_struct_get(arg.b, 0, 8))") [missing]
    assert((1 == @tir.tvm_struct_get(arg.b, 0, 10, dtype=int32)), "Argument arg.b.device_type has an unsatisfied constraint: (1 == tir.tvm_struct_get(arg.b, 0, 10))") [missing]
    assert((dev_id == @tir.tvm_struct_get(arg.b, 0, 9, dtype=int32)), "Argument arg.b.device_id has an unsatisfied constraint: (dev_id == tir.tvm_struct_get(arg.b, 0, 9))") [missing]
    attr [0] "compute_scope" = "main_compute_"; [missing]
    for (i: int32, 0, 8) { [missing]
      assert(False, "Some numbers") [/home/driazati/work/t2/test.py:31]
      B_1: Buffer(B, float32, [8], [])[i] = (A_1: Buffer(A, float32, [8], [])[i] + 1f32) [/home/driazati/work/t2/test.py:32]
    } []
  } []
}